e≈1 + 1 + 1/2! + 1/3! +……+ 1/n!   （2）
1 
1+1/1
2
1+1/1+ 1/(1*2)
3
1+1/1+ 1/(1*2) + 1/(1*2*3)

e=2+1/2(1+1/3(1+1/4(1+…1/(n-1)(1+1/n)…)))   （3）

e-1=1+1/2(1+1/3(1+1/4(1+…1/(n-1)(1+1/n)…)))   （3）
n
e=1+1/n
n-1
e=1+1/(n-1)*e= (e+1)/(n-1)
n-2
for(i<-n to 1 step -1)
e=(e+1)/i

在上上一篇博客中，虽然实现了计算n为自然数e的程序，但是GetLength 函数实现的数学原理一直没有想清楚。其实是这样的。 计算自然数e时，我们使用的时泰勒公式

e^x = 1 + x + x^2/2! +... + x^n/n!...

当考虑到泰勒公式的余项时，余项可以表示为

R(x) = (e^esp * x^(n+1))/(n+1)!

其中esp在0～x之间。再取x=1,得到

R(1) = e^esp/(n+1)! <= e/(n+1)! < 10^(-M)

10^(-M)就是我们要达到的误差限，也就是小数点后的后M位。 因此，若要计算到10000位的精度，只需计算(n+1)!/e > 10^10000即可。

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#ifndef UINT
typedef unsigned int UINT;
#endif
int GetLength(int m)
{
       int n=1;
       double x=2.0/2.72;
       while(m)
       {
              while(x<1.0)
              {
                     x*=(double)(++n+1);
              }
              while(x>=1.0 && m)
              {
                     x/=10.0;
                     --m;
              }
       }
       while(x<1.0)
       {
              x*=(double)(++n+1);
       }
       return n;
}
int main(int argc, char* argv[])
{
       const UINT base=100000;
       int i,k,m,n=1000;
       //printf("输入计算e的有效位数n=");
       //scanf("%d",&n);
       m=GetLength(n);
       UINT *r=new UINT[m+1];
       assert(r!=NULL);
       for(i=0;i<=m;++i)
              r[i]=1;
       //memset(r,1,sizeof(unsigned int)*(m+1));
       printf("e=2.\n");
       for(k=n;k>0;k-=5)
       {
              UINT y=0;
              for(i=m;i>=2;--i)
              {
                     y=y+r[i]*base;
                     r[i]=y%i;
                     y/=i;
              }
              if(k<5)
              {
                     char str[128];
                     sprintf(str,"%05d",y%base);
                     str[k]='\0';
                     printf("%s\t\n",str);
              }
              else
              {
                     if(y<base)
                            printf("%05d\t",y);
                     else
                     {
                            printf("XXXXXX\t");
                            if(r)
                                   delete[]r;
                            return 1;
                     }
              }
       }
       if(r)
              delete[]r;
       return 0;
}